# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    # - name: Install Poetry and pytest
    #   run: pipx install poetry==1.6.1 pytest

    # - name: Create Poetry lock file if missing
    #   run: poetry lock --no-update

    # - uses: actions/setup-python@v5
    #   with:
    #     python-version: ${{ matrix.python-version }}
    #     cache: 'poetry'

    # - name: Install dependencies
    #   run: poetry install --no-interaction

    # - name: Test with pytest
    #   run: poetry run pytest


    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry install
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-1.6.1

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Create Poetry lock file
      run: poetry lock --no-update

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python-version }}-${{ matrix.os }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root
      if: steps.cache-deps.outputs.cache-hit != 'true'

    - name: Install package itself
      run: poetry install --no-interaction

    # - name: Test with pytest
    #   run: poetry run pytest

    - name: Test with unittest
      run: python -m unittest
